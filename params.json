{"name":"Humanizer","tagline":"A very simple captcha with Rails 3 and 4 support","body":"# Humanizer\r\n\r\nHumanizer is a very simple CAPTCHA method. It has a localized YAML file with questions and answers which is used to validate that the user is an actual human. Any model that includes ActiveModel::Validations should work. Our aim is to be database and mapper agnostic, so if it doesn't work for you, open an issue. Humanizer works with Rails 3 and 4.\r\n\r\n## Installation\r\n\r\nAdd `humanizer` to your Gemfile:\r\n\r\n```ruby\r\ngem 'humanizer'\r\n```\r\n\r\nBundle and run the generator in terminal:\r\n\r\n```sh\r\nbundle\r\nrails g humanizer\r\n```\r\n\r\n## Advanced Installation\r\n\r\n* Install all locales: `rails g humanizer --all-locales`\r\n* Show available locales: `rails g humanizer --show-locales`\r\n* Install selected locales: `rails g humanizer en fi de`\r\n\r\n## Usage\r\n\r\n1. In your model, include Humanizer and add the #require_human_on method, example:\r\n\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n  include Humanizer\r\n  require_human_on :create\r\nend\r\n```\r\n\r\n2. Ask the question in the form, example:\r\n\r\n```erb\r\n<%= f.label :humanizer_answer, @model.humanizer_question %>\r\n<%= f.text_field :humanizer_answer %>\r\n<%= f.hidden_field :humanizer_question_id %>\r\n```\r\n\r\n3. If you are using attr_accessible, remember to whitelist `:humanizer_answer` and `:humanizer_question_id`.\r\n\r\n4. If you are using strong_parameters, remember to permit `:humanizer_answer` and `:humanizer_question_id`.\r\n\r\n## Configuration\r\n\r\nDefault translations can be found in config/locales/\r\n\r\nYou might want to add/change question and answer pairs. This can be easily done by adding/modifying entries in locales file.\r\n\r\n## Skipping validation\r\n\r\nYou might want to skip the humanizer validations on your tests or rails console.\r\n\r\nYou can just have a simple attribute on your model and use it to bypass the validation. Here's an example:\r\n\r\n```ruby\r\nattr_accessor :bypass_humanizer\r\nrequire_human_on :create, :unless => :bypass_humanizer\r\n```\r\n\r\nNow when bypass_humanizer is true, validation will be skipped.\r\n\r\n## Reloading questions\r\n\r\nIn case you want to give your users the option to change the question, there's a #change_humanizer_question method to help you.\r\n\r\nTo make sure the current question doesn't get asked again, you can pass the current question id to the method. For example:\r\n\r\n```ruby\r\n@user.change_humanizer_question(params[:user][:humanizer_question_id])\r\n```\r\n\r\n## Live sites\r\n\r\n* [ArcticStartup.com](http://arcticstartup.com/) - sign up form\r\n* [Paspartout](http://paspartout.com/) - sign up form\r\n\r\n## License\r\n\r\nHumanizer is licensed under the MIT License, for more details see the LICENSE file.\r\n\r\n## Question/Answer Translations\r\n\r\n* English, Finnish and Portuguese translations by [Kisko Labs](http://kiskolabs.com/)\r\n* German by [Sven Schwyn](http://github.com/svoop)\r\n* Dutch by [Joren De Groof](http://github.com/joren)\r\n* Brazilian Portuguese by [Britto](http://github.com/britto)\r\n* Russian by [Shark](http://github.com/Serheo)\r\n* Spanish by [Juanjo Baz√°n](https://github.com/xuanxu)\r\n* Polish by [Maciek O](https://github.com/ohaleck)\r\n* Italian by [Alberto Vena](https://github.com/kennyadsl)\r\n* Chinese (Simplified) by [Crane Jin](https://github.com/cranej)\r\n\r\n## Contributors\r\n\r\n* [Florian Bertholin](https://github.com/Arkan)\r\n* [seogrady](https://github.com/seogrady)\r\n* [yairgo](https://github.com/yairgo)\r\n* [woto](https://github.com/woto)\r\n\r\n## CI Build Status\r\n\r\n[![Build Status](https://travis-ci.org/kiskolabs/humanizer.png?branch=master)](https://travis-ci.org/kiskolabs/humanizer)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}